TODO Update this after Ruby/Rails update

# RidePilot

RidePilot is a paratransit trip scheduling application. 

RidePilot is a project of Ride Connection, a Portland-area community
transportation provider.  It is primarily written by hackers at
OpenPlans.

## Dependencies (as of 2015-01-13)

* Postgresql 8.4
* PostGIS 1.5
* Ruby 1.9.3
* Rails 3.0
* Imagemagick

## Setting up a development environment

The cleanest way to setup a development environment is using Vagrant, Chef and VirtualBox. This gives you an isolated development environment that is easy to provision. If you don't want to go that route, you can setup all of the dependencies yourself on your local machine. YMMV with either approach.

### Provisioning a VM with Vagrant

Using this method, your local project folder will be mounted in the guest VM as `/vagrant`, and port 3000 will automatically be forwarded from your host machine to the guest VM. This means you can edit files in your local text editor/IDE of choice, and browse the development website from your local browser of choice as you normally would. You will run all of your rails commands (server, console, rake, etc.) from inside the VM, and do all of your development work (including any `git` commands) from your local terminal window.

1. Make sure you have the most recent version of Vagrant and VirtualBox installed

2. Install a few plugins:

        vagrant plugin install vagrant-vbguest
        vagrant plugin install vagrant-librarian-chef
    
3. From the project directory:

        vagrant up # This will take a while the first time you run it as it provisions the new virtual server
        vagrant ssh # You're now connected to your new VM
    
4. Once SSH'd in:

        cd /vagrant # This is the mount point for the project directory on the host
    
5. Now skip ahead to "Common Setup Steps"

#### Ignoring Chef Cookbook Files

Provisioning a server will download copies of all of the Chef cookbooks to the `./cookbooks` directory of the project folder. This folder is ignored by Git already, but you may want to tell your editor/IDE to ignore this folder as well so as not to be included in code search/replace operations.

### Provisioning Locally (without Vagrant)

1. Install the required versions of Postgresql, PostGIS, Imagemagick and any other system packages required for your setup

2. Install RVM

3. Install any additional libraries reported by `rvm requirements`

4. Install the required version of Ruby:

        rvm list known
        rvm install ruby-xxx.xxx

5. Install bundler

        rvm gemset use ruby-xxx.xxx@global
        gem install bundler
    
6. `cd` into (or out and back into) the project directory to pickup the RVM configuration files. Follow any instructions for trusting the .rvmrc file or creating the gemset.

7. To set up PostgreSQL for use with RidePilot, you will need the
`fuzzystrmatch` library (included in postgresql-contrib-8.4 in Ubuntu),
and `postgis`.  This adds support for `dmetaphone`, which is how we
phonetically match names.  Run `psql` and then the following commands:

        -- Create a new database
        CREATE DATABASE template_postgis15;

        -- Make it a template database
        UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis15';

        -- Connect to new database and install the pl/pgsql language
        \c template_postgis15

        CREATE LANGUAGE plpgsql;

        -- Install PostGIS (your file paths may vary)
        \i /opt/local/share/postgresql84/contrib/postgis-1.5/postgis.sql 
        \i /opt/local/share/postgresql84/contrib/postgis-1.5/spatial_ref_sys.sql
        GRANT ALL ON geometry_columns TO PUBLIC;
        GRANT ALL ON geography_columns TO PUBLIC;
        GRANT ALL ON spatial_ref_sys TO PUBLIC;

        -- vacuum freeze: it will guarantee that all rows in the database are
        -- "frozen" and will not be subject to transaction ID wraparound
        -- problems.
        VACUUM FREEZE;

        -- You'll also want to set up the fuzzy string matching functions
        \i /opt/local/share/postgresql84/contrib/fuzzystrmatch.sql 

8. Continue to "Common Setup Steps"
    
### Common Setup Steps

1. Install the gem bundle. In the project dir, run:

        bundle install

2. Make sure your `config/database.yml` contains the line in the section named `common: &common`:

        template: template_postgis15

3. Copy `config/app_config_template.yml` to `config/app_config.yml`. You can leave it as-is in most cases.

4. Create the database user and development and test databases per the database config

5. Make sure you can start the app without error

        rails server
    
   Then make sure you can browse the website at `http://localhost:3000` without error

6. Make sure all of the automated tests pass
    
        bundle exec rake db:test:prepare
        bundle exec rake test

## Deployment

This application uses capistrano for deployment. Check out `config/deploy.rb` 
and `config/deploy/*` for basic deployment recipes and configuration.

Deployment uses key-based authentication. To deploy, you'll need to add your 
public key on the staging/production servers so you can run commands as the 
"deployer" user.

To set this up, talk to another developer to get your public key on the 
machines. If you need to do system administration on the servers, you'll need 
your own user account set up as well.

Once you have SSH access as deployer, you can deploy:

    cap [staging|production] deploy

Remember to push your changes to the main repository first, since the deploy
process pulls from there.  Database migrations are currently performed by hand
after deploying.

### Deployment Gotchas

Ridepilot staging is on the production server. That means when you go into 
rails/ridepilot-staging, you actually have to set `RAILS_ENV=production` if 
you're going to run any commands. It will not affect the real production 
app if you're in the right directory.
